@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.Threading

<div class="modal fade @modal.ModalClass" tabindex="-1" role="dialog" style="display:@modal.ModalDisplay; overflow-y: auto;" id="finnishModal">
    <div class="d-flex justify-content-center">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content">
        @if (modalStatus == 0)
        {
            <div class="modal-header justify-content-center">
                <div class="icon-box">
                    <img src="Images/checked.png">
                </div>
                </div>
                <div class="modal-body text-center">
                    <h4>Mission completed!</h4>
                    <p>Mission finished successfuly.</p>
                    <button class="btn btn-success" @onclick="e => { modalStatus++;}" data-dismiss="modal"><span>Next</span> <i class="material-icons">&#x279C;</i></button>
                </div>
        }
        else if (modalStatus == 1)
        {
            <h5>Time spent: @progressStats.TrailTime hours </h5>
            <h5>Distance walked: @progressStats.overallDistance km</h5>
            <h5>Xp gained: @LevelAndXp.XpFromTrail(capturePoint.DefenseLevel) </h5>
            <button class="btn btn-success" @onclick="e => { modalStatus++; shownUserLevel = currentUser.Level;shownXp = (int)currentUser.ExperiencePoints; XpGainSequence((int)currentUser.ExperiencePoints + LevelAndXp.XpFromTrail(capturePoint.DefenseLevel)); }" data-dismiss="modal"><span>Next</span> <i class="material-icons">&#x279C;</i></button>
        }
        else if (modalStatus == 2)
        {
            <div align="center">
                <img src="Images/stockProfile.png" style="display:block; width:50%; height:50%">
                <h5>@currentUser.UserName</h5>
            </div>

            <div class="modal-body text-center">
                @if (showGlitch)
                {
                    <h4 class="glitch2" data-text="Level: @shownUserLevel">Level: @shownUserLevel</h4>
                }
                else
                {
                    <h4>Level: @shownUserLevel</h4>
                }

                <div class="progress">
                    @if (showOldXp)
                    {
                        <div class="level-bar1 linear active" style="width: @LevelAndXp.XpPercentageOfLevel(shownUserLevel, (int)currentUser.ExperiencePoints)%; background-color: #3AAFC1; "></div>
                        <div class="level-bar2 linear active" style="width: @LevelAndXp.XpPercentageOfLevel(currentUser.Level, LevelAndXp.XpFromTrail(capturePoint.DefenseLevel))%; background-color: #FFAF1D; "></div>
                    }
                    else
                    {
                        <div class="level-bar2 linear active" style="width: @LevelAndXp.XpPercentageOfLevel(currentUser.Level, shownXp)%; background-color: #FFAF1D; "></div>
                    }

                </div>
                <div class="d-flex justify-content-center">
                    <h5><glitch title="@shownXp">@shownXp / @LevelAndXp.XpToLevelUp(shownUserLevel) xp</glitch></h5>
                </div>
                <button class="btn btn-success" @onclick="e => { NavManager.NavigateTo(g); }" data-dismiss="modal"><span>Done</span></button>
            </div>
                }
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public Modal modal { get; set; }
    [Parameter] public UserData currentUser { get; set; }
    [Parameter] public CapturePoint capturePoint { get; set; }
    [Parameter] public ProgressStats progressStats { get; set; }
    private int modalStatus = 0;
    private int shownXp = 0;
    private int shownUserLevel;
    private bool showOldXp = true;
    private bool showGlitch = false;
    string g = "/";

    private async Task XpGainSequence(int countTo)
    {
        int xpToLevelUp = LevelAndXp.XpToLevelUp(currentUser.Level);
        await Task.Delay(500);

        if (countTo < xpToLevelUp)
        {
            await Count(countTo);
        }
        else
        {
            await Count(xpToLevelUp);
            await Task.Delay(400);
            LevelUpUI();
            await Count(countTo - xpToLevelUp);
        }
    }

    private async Task Count(int countTo)
    {
        while (shownXp < countTo)
        {
            shownXp++;
            StateHasChanged();
            await Task.Delay(10);
        }
    }

    private void LevelUpUI()
    {
        showGlitch = true;
        shownUserLevel++;
        shownXp = 0;
        showOldXp = false;
        StateHasChanged();
    }
}
