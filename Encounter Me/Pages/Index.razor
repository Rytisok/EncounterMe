@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@using ExtensionMethods
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using System.Security.Claims
@using System.Linq
@using BlazorCurrentDevice
@implements IAsyncDisposable

<div id="mapWrapper">
    <div id="map"></div>
</div>
<Encounter_Me.Components.AlertModal modal=@_alertModal modalText="It is recommended to turn on location services for the best experience"></Encounter_Me.Components.AlertModal>
<Encounter_Me.Components.ErrorModal modal=@_errorModal modalText="Trail walking is supported on mobile devices only!" devButtonAction=@TestTrailLoad></Encounter_Me.Components.ErrorModal>

@code{

    private List<CapturePoint> _capturePoints = new List<CapturePoint>();

    private WindowNavigatorGeolocation _geolocationWrapper;
    private GeolocationPosition _geolocationPosition;

    private List<GeolocationPosition> _positionHistory = new List<GeolocationPosition>();

    private IAsyncDisposable _geopositionWatcher;

    private Modal _alertModal = new Modal();
    private Modal _errorModal = new Modal();

    private UserData currentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private AuthenticationState authState;

    [Inject]
    public ICapturePointService capturePointService { get; set; }

    [Inject]
    public IUserDataService userDataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            Guid userId = Guid.Parse(authState.User.FindFirst(ClaimTypes.UserData).Value);
            currentUser = await userDataService.GetUserDetails(userId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);

            var window = await JSRuntime.Window();
            var navigator = await window.Navigator();
            _geolocationWrapper = navigator.Geolocation;

            _geolocationPosition = (await _geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            })).Location;

            if (_geolocationPosition == null)
            {
                await JSRuntime.InvokeAsync<string>(
            "initializeTrailMap", 0, 0, dotNetObjRef, false);

                ModalControl.OpenModal(_alertModal);
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeAsync<string>(
            "initializeTrailMap", _geolocationPosition.Coords.Latitude, _geolocationPosition.Coords.Longitude, dotNetObjRef, true);
            }
        }
        base.OnAfterRender(firstRender);
    }

    [Inject] IBlazorCurrentDeviceService BlazorCurrentDeviceService { get; set; }

    [JSInvokable]
    public async void StartTrail(string trailID)
    {
        //Old method stopped working for some reason

        NavManager.NavigateTo("/TrailProgress/" + trailID);

        /*
        try
        {
            DeviceValidator validator = new DeviceValidator();
            await validator.ValidateDevice();
            NavManager.NavigateTo("/TrailProgress/" + trailID);
        }
        catch
        {
            ModalControl.OpenModal(_errorModal);
            testTrailID = trailID;
            StateHasChanged();
        }*/
    }

    public string testTrailID = "";

    [JSInvokable]
    public async void FindTrails(double Lat1, double Lon1, double Lat2, double Lon2)
    {

        IEnumerable<CapturePoint> receivedCapturePoints = (await capturePointService.GetCapturePointsInView(Lat1, Lon1, Lat2, Lon2));
        _capturePoints = receivedCapturePoints.ToList();

        UpdateMarkers();
    }

    public async void UpdateMarkers()
    {
        foreach (CapturePoint capturePoint in _capturePoints)
        {
            await AddMarker(capturePoint);
        }
    }

    /*
    [JSInvokable]
    public async void FilterMarkers(int difficulty, int length)
    {
        _capturePoints = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");

        await JSRuntime.InvokeAsync<string>(
        "clearMarkers");

        var filterQuery = from trail
                          in _capturePoints
                          where trail.Diff <= difficulty && trail.Length <= length
                          select trail;

        List<TrailContainer> filteredTrails = new List<TrailContainer>();

        foreach (var trail in filterQuery)
        {
            filteredTrails.Add(trail);
        }

        _trails = filteredTrails;

        UpdateMarkers();
    }*/

    private async Task AddMarker(CapturePoint capturePoint)
    {

        var authState = await AuthState;

        string infoWindowContent;


        if (authState.User.Identity.IsAuthenticated)
        {
            Guid userId = Guid.Parse(authState.User.FindFirst(ClaimTypes.UserData).Value);
            currentUser = await userDataService.GetUserDetails(userId);

            string possibleAction;


            //could be done cleaner
            if (capturePoint.faction == 0)
            {
                possibleAction = "Capture";
            }
            else if (capturePoint.faction == (int)currentUser.Faction.Value)
            {
                possibleAction = "Reinforce";
            }
            else
            {
                possibleAction = "Attack";
            }

            infoWindowContent = "<div id=content>" +
            "<h1 style=\"font-size:25px\"> " + (Factions)capturePoint.faction + " capture point</h1>" +
            "<p style=\"font-size:25px\"> Defense level: " + capturePoint.DefenseLevel.ToString() + "</p>" +
            "<div class=\"text-center\">" +
            "<button class = \"btn-popup\" title=\"Walk the trail\" onclick = \"startTrail('" + capturePoint.guid.ToString() + "')\" > " + possibleAction + "</button>" +
            "</div>" +
            "</div>";
        }
        else
        {
            infoWindowContent = "<div id=content>" +
            "<h1 style=\"font-size:25px\"> " + (Factions)capturePoint.faction + " capture point</h1>" +
            "<p style=\"font-size:25px\"> Defense level: " + capturePoint.DefenseLevel.ToString() + "</p>" +
            "</div>";
        }

        await JSRuntime.InvokeAsync<string>(
            "addMarker", capturePoint.Lat, capturePoint.Lon, infoWindowContent, capturePoint.faction);
    }

    public async ValueTask DisposeAsync()
    {
        if (_geopositionWatcher != null)
        {
            await _geopositionWatcher.DisposeAsync();
        }

    }

    //test function to test trail walking on pc
    private async void TestTrailLoad()
    {
        NavManager.NavigateTo("/TrailProgress/" + testTrailID);
    }
}