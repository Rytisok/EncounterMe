@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div id="mapid"></div>

@code{
    List <TrailContainer> trails = new List<TrailContainer>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeAsync<string>(
            "initialize", 54.7, 25.26, dotNetObjRef);
        }
        base.OnAfterRender(firstRender);
    }

    [JSInvokable]
    public async void FindTrails()
    {
        trails = await Http.GetFromJsonAsync<List<TrailContainer>>("testTrail.json");

        UpdateMarkers();
    }

    public async void UpdateMarkers()
    {
        foreach (TrailContainer trail in trails)
        {
            await AddMarker(trail);
        }
    }

    [JSInvokable]
    public async void FilterMarkers(int difficulty, int length)
    {
        trails = await Http.GetFromJsonAsync<List<TrailContainer>>("testTrail.json");

        await JSRuntime.InvokeAsync<string>(
        "clearMarkers");

        var filterQuery = from trail in trails where trail.Diff <= difficulty && trail.Length <= length select trail;

        List<TrailContainer> filteredTrails = new List<TrailContainer>();

        foreach (var trail in filterQuery)
        {
            filteredTrails.Add(trail);
        }

        trails = filteredTrails;

        UpdateMarkers();
    }

    private async Task AddMarker(TrailContainer trail)
    {
        string difficulty = "";
        for (int i = 0; i < trail.Diff; i++)
        {
            difficulty += "★";
        }
        for (int i = 0; i < 5 - trail.Diff; i++)
        {
            difficulty += '☆';
        }

        string infoWindowContent = "<div id=content>" +
        "<p style=\"font-size:25px\"> Length: " + trail.Length + "km </p>" +
        "<p style=\"font-size:25px\"> Difficulty: " + difficulty + "</p>" +
        "<button title=\"See trail only\" onclick = \"showTrailOnly()\" ><img src = \"route.png\" ></button>" +
        "<button title=\"Walk the trail\" onclick = \"futureFeature()\" ><img src = \"walk.png\" ></button>" +
        "</div>";

        await JSRuntime.InvokeAsync<string>(
            "addMarker", trail.Lat, trail.Lng, infoWindowContent, trail.GeoJsonData);
    }
}