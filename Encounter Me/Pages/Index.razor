@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@using ExtensionMethods
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using System.Security.Claims
@implements IAsyncDisposable

<div id="map"></div>

<Encounter_Me.Components.AlertModal modal=@_alertModal modalText="It is recommended to turn on location services for the best experience"></Encounter_Me.Components.AlertModal>

<Encounter_Me.Components.ErrorModal modal=@_errorModal modalText="Trail walking is supported on mobile devices only!" devButtonAction=@TestTrailLoad></Encounter_Me.Components.ErrorModal>

@code{

    private List<TrailContainer> _trails = new List<TrailContainer>();

    private WindowNavigatorGeolocation _geolocationWrapper;
    private GeolocationPosition _geolocationPosition;

    private List<GeolocationPosition> _positionHistory = new List<GeolocationPosition>();

    private IAsyncDisposable _geopositionWatcher;

    private Modal _alertModal = new Modal();
    private Modal _errorModal = new Modal();

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);

            var window = await JSRuntime.Window();
            var navigator = await window.Navigator();
            _geolocationWrapper = navigator.Geolocation;

            _geolocationPosition = (await _geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            })).Location;

            //delegate here?
            if (_geolocationPosition == null)
            {
                await JSRuntime.InvokeAsync<string>(
            "initializeTrailMap", 0, 0, dotNetObjRef, false);

                ModalControl.OpenModal(_alertModal);
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeAsync<string>(
            "initializeTrailMap", _geolocationPosition.Coords.Latitude, _geolocationPosition.Coords.Longitude, dotNetObjRef, true);
            }
        }
        base.OnAfterRender(firstRender);
    }

    [JSInvokable]
    public async void StartTrail(int trailID)
    {
        try
        {
            DeviceValidator validator = new DeviceValidator();
            await validator.ValidateDevice();
            NavManager.NavigateTo("/TrailProgress/" + trailID.ToString());
        }
        catch
        {
            ModalControl.OpenModal(_errorModal);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async void FindTrails()
    {
        _trails = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");

        UpdateMarkers();
    }

    public async void UpdateMarkers()
    {
        foreach (TrailContainer trail in _trails)
        {
            await AddMarker(trail);
        }
    }

    [JSInvokable]
    public async void FilterMarkers(int difficulty, int length)
    {
        _trails = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");

        await JSRuntime.InvokeAsync<string>(
        "clearMarkers");

        var filterQuery = from trail
                          in _trails
                          where trail.Diff <= difficulty && trail.Length <= length
                          select trail;

        List<TrailContainer> filteredTrails = new List<TrailContainer>();

        foreach (var trail in filterQuery)
        {
            filteredTrails.Add(trail);
        }

        _trails = filteredTrails;

        UpdateMarkers();
    }

    private async Task AddMarker(TrailContainer trail)
    {

        var authState = await AuthState;

        string difficulty = trail.Diff.ToTrailStars();

        string infoWindowContent;

        if (authState.User.Identity.IsAuthenticated)
        {
            infoWindowContent = "<div id=content>" +
            "<p style=\"font-size:25px\"> Length: " + trail.Length + "km </p>" +
            "<p style=\"font-size:25px\"> Difficulty: " + difficulty + "</p>" +
            "<button title=\"See trail only\" onclick = \"showTrailOnly()\" ><img src = \"Images/route.png\" ></button>" +
            "<button title=\"Walk the trail\" onclick = \"startTrail(" + trail.Id.ToString() + ")\" ><img src = \"Images/walk.png\" ></button>" +
            "</div>";
        }
        else
        {
            infoWindowContent = "<div id=content>" +
            "<p style=\"font-size:25px\"> Length: " + trail.Length + "km </p>" +
            "<p style=\"font-size:25px\"> Difficulty: " + difficulty + "</p>" +
            "</div>";
        }

        await JSRuntime.InvokeAsync<string>(
            "addMarker", trail.Lat, trail.Lng, infoWindowContent, (int)trail.trailType, trail.GeoJsonData);
    }

    public async ValueTask DisposeAsync()
    {
        if (_geopositionWatcher != null)
        {
            await _geopositionWatcher.DisposeAsync();
        }

    }

    //test function to test trail walking on pc
    private async void TestTrailLoad()
    {
        NavManager.NavigateTo("/TrailProgress/3");
    }
}