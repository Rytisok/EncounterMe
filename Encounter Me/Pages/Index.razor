@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@using ExtensionMethods
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@implements IAsyncDisposable

<div id="map"></div>

@code{

    List<TrailContainer> trails = new List<TrailContainer>();

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition geolocationPosition;

    private List<GeolocationPosition> positionHistory = new List<GeolocationPosition>();

    private IAsyncDisposable geopositionWatcher;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);

            var window = await JSRuntime.Window();
            var navigator = await window.Navigator();
            geolocationWrapper = navigator.Geolocation;

            await GetLocation();

            await JSRuntime.InvokeAsync<string>(
            "initialize", geolocationPosition.Coords.Latitude, geolocationPosition.Coords.Longitude, dotNetObjRef);

            await WatchPosition();
        }
        base.OnAfterRender(firstRender);
    }

    public async Task GetLocation()
    {
        geolocationPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;
    }

    public async Task WatchPosition()
    {
        geopositionWatcher = await geolocationWrapper.WatchPosition(async (p) =>
        {
            //might need later to compensate for accuracy problems
            //positionHistory.Add(p.Location);

            await JSRuntime.InvokeAsync<string>(
                "UpdatePositionMarker", p.Location.Coords.Latitude, p.Location.Coords.Longitude);
            StateHasChanged();
        }
        );
    }


    [JSInvokable]
    public async void StartTrail(int trailID)
    {
        NavManager.NavigateTo("/TrailProgress/" + trailID.ToString());
    }

    [JSInvokable]
    public async void FindTrails()
    {
        trails = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");

        UpdateMarkers();
    }

    public async void UpdateMarkers()
    {
        foreach (TrailContainer trail in trails)
        {
            await AddMarker(trail);
        }
    }

    [JSInvokable]
    public async void FilterMarkers(int difficulty, int length)
    {
        trails = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");

        await JSRuntime.InvokeAsync<string>(
        "clearMarkers");

        var filterQuery = from trail
                          in trails
                          where trail.Diff <= difficulty && trail.Length <= length
                          select trail;

        List<TrailContainer> filteredTrails = new List<TrailContainer>();

        foreach (var trail in filterQuery)
        {
            filteredTrails.Add(trail);
        }

        trails = filteredTrails;

        UpdateMarkers();
    }

    private async Task AddMarker(TrailContainer trail)
    {
        string difficulty = trail.Diff.ToTrailStars();

        string infoWindowContent = "<div id=content>" +
        "<p style=\"font-size:25px\"> Length: " + trail.Length + "km </p>" +
        "<p style=\"font-size:25px\"> Difficulty: " + difficulty + "</p>" +
        "<button title=\"See trail only\" onclick = \"showTrailOnly()\" ><img src = \"Images/route.png\" ></button>" +
        "<button title=\"Walk the trail\" onclick = \"startTrail("+ trail.ID.ToString() + ")\" ><img src = \"Images/walk.png\" ></button>" +
        "</div>";

        await JSRuntime.InvokeAsync<string>(
            "addMarker", trail.Lat, trail.Lng, infoWindowContent, (int)trail.trailType, trail.GeoJsonData);
    }

    public async ValueTask DisposeAsync()
    {
        await StopWatch();
    }

    public async Task StopWatch()
    {
        await geopositionWatcher.DisposeAsync();
        geopositionWatcher = null;
    }
}