@page "/Sign up"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@using Serilog
@using Encounter_Me.Components 


<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card mt-5 mb-5">
            <div class="card-header">
                <h3>Get ready to encounter the city!</h3>
            </div>
            <div class="card-body">
                @if (isRegistrationSuccess)
                {
                    <div class="alert alert-success" role="alert">Registration was successful</div>
                }

                @if (showSignUpError)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>@signUpErrorText</p>
                    </div>
                }
            <EditForm Model="@registrationUserModel" OnValidSubmit="CreateNewUser" class="card-body bg-light mt-0" autocomplete="off">
                <DataAnnotationsValidator />
                <div class="col-md-12 mb-3">
                    <label for="Username">User Name</label>
                    <InputText id="Username" placeholder="Enter Username" @bind-Value="registrationUserModel.UserName" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.UserName)" />
                </div>
                <div class="col-md-12 mb-3">
                    <label for="FirstName">First Name</label>
                    <InputText id="FirstName" placeholder="Enter Name" @bind-Value="registrationUserModel.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.FirstName)" />
                </div>
                <div class="col-md-12 mb-3">
                    <label for="LastName">Last Name</label>
                    <InputText id="LastName" placeholder="Enter Surname" @bind-Value="registrationUserModel.LastName" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.LastName)" />
                </div>
                <div class="col-md-12 mb-3">
                    <label for="Email">Email</label>
                    <InputText id="Email" placeholder="Enter Email" @bind-Value="registrationUserModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.Email)" />
                </div>
                <div class="col-md-12 mb-3">
                    <label for="Password">Password</label>
                    <InputText id="Password" placeholder="Enter Password" type="password" @bind-Value="registrationUserModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.Password)" />
                    <label for="Password" style="color: yellow">*At least 8 symbols, 1 uppercase, 1 lowercase and 1 number.</label>
                </div>
                <div class="col-md-12 mb-3">
                    <label for="Confirm password">Confirm password</label>
                    <InputText id="Confirm Password" placeholder="Repeat Password" type="password" @bind-Value="registrationUserModel.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="@(() => registrationUserModel.ConfirmPassword)" />
                </div>

                <div class="col-md-12 mb-3">
                    <label for="Faction">Faction</label><br>
                    <div class="btn-group" role="group">
                        <InputRadioGroup Name="Faction" @bind-Value="registrationUserModel.Faction" class="form-check-inline" id="Faction">
                            <label class="btn btn-outline-warning" style="margin-right:15px">
                                <InputRadio Name="Faction" class="inputRadio" Value="Factions.Yellow" autocomplete="off" /> Yellow
                            </label>
                            <label class="btn btn-outline-primary" style="margin-right:15px">
                                <InputRadio Name="Faction" class="inputRadio" Value="Factions.Blue" autocomplete="off" />Blue <br>
                            </label>
                            <label class="btn btn-outline-danger" style="margin-right:15px">
                                <InputRadio Name="Faction" class="inputRadio" Value="Factions.Red" autocomplete="off" />Red <br>
                            </label>
                            <label class="btn btn-outline-success">
                                <InputRadio Name="Faction" class="inputRadio" Value="Factions.Green" autocomplete="off" />Green <br>
                            </label>
                        </InputRadioGroup>
                    </div>
                    <ValidationMessage For="@(() => registrationUserModel.Faction)" />

                    @switch (registrationUserModel.Faction)
                    {
                        case (Factions.Blue):
                            <LoreBox FrameColorA="#004cff" FrameColorB="#00ffe7" HeaderColor="#0051fe" HeaderText="Blue faction" DescriptionText="Very deep blue faction lore coming very very soon. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "></LoreBox>
                            break;
                        case (Factions.Yellow):
                            <LoreBox FrameColorA="#f7ff00" FrameColorB="#ffb400" HeaderColor="#f7ff00" HeaderText="Yellow faction" DescriptionText="Very deep yellow faction lore coming very very soon. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "></LoreBox>
                            break;
                        case (Factions.Green):
                            <LoreBox FrameColorA="#01952d" FrameColorB="#73f445" HeaderColor="#0d9f30" HeaderText="Green faction" DescriptionText="Very deep green faction lore coming very very soon. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "></LoreBox>
                            break;
                        case (Factions.Red):
                            <LoreBox FrameColorA="#640f0f" FrameColorB="#f02d2d" HeaderColor="#b50000" HeaderText="Red faction" DescriptionText="Very deep red faction lore coming very very soon. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "></LoreBox>
                            break;
                        default:
                            break;
                    }

                </div>

                <div class="form-group" align="left">
                    <div class="col-md-12 mb-3">
                        <button type="submit" class="btn btn-primary">Sign up</button>
                    </div>
                </div>

            </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private RegistrationUserModel registrationUserModel = new();
    private bool isRegistrationSuccess = false;
    private bool showSignUpError = false;
    private string signUpErrorText = "";


    [Inject]
    public IUserDataService userDataService { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthStateProvider { get; set; }

    private async Task CreateNewUser()
    {
        isRegistrationSuccess = false;
        showSignUpError = false;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if(authState.User.Identity.IsAuthenticated is false)
        {
            try
            {
                var newUser = new UserData(
                id: Guid.NewGuid(),
                userName: registrationUserModel.UserName,
                faction: (Factions)registrationUserModel.Faction,
                firstName: registrationUserModel.FirstName,
                lastName: registrationUserModel.LastName,
                email: registrationUserModel.Email,
                password: registrationUserModel.Password,
                salt: null);
                await userDataService.AddUser(newUser);

                Log.Information("Created new user {@model}", newUser);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                showSignUpError = true;
                signUpErrorText = e.Message;
            }

            if (showSignUpError is false)
            {
                isRegistrationSuccess = true;
                var result = await AuthService.Login(new LoginUserModel(registrationUserModel.Email, registrationUserModel.Password));
                NavManager.NavigateTo("/");
            }
        }
        else
        {
            NavManager.NavigateTo("/NiceTry");
        }
    }
}
