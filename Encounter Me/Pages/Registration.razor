@page "/Sign up"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

@*<style>
        .inputRadio {
            display: none;
        }

</style>*@

<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card mt-5 mb-5">
            <div class="card-header">
                <h3>Get ready to encounter the city!</h3>
            </div>
            <div class="card-body">
                @if (isRegistrationSuccess)
                {
                    <div class="alert alert-success" role="alert">Registration was successful</div>
                }

                @if (showSignUpError)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>@signUpErrorText</p>
                    </div>
                }
                <EditForm Model="@registrationUserModel" OnValidSubmit="CreateNewUser" class="card-body bg-light mt-0" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="col-md-12 mb-3">
                        <label for="Username">User Name</label>
                        <InputText id="Username" placeholder="Enter Username" @bind-Value="registrationUserModel.UserName" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.UserName)" />
                    </div>

                    <div class="col-md-12 mb-3">
                        <label for="Faction">Fraction</label><br>
                        <div class="btn-group" role="group">
                            <InputRadioGroup Name="Faction" @bind-Value="registrationUserModel.Faction" class="form-check-inline" id="Faction">
                                <label class="btn btn-outline-warning">
                                    <InputRadio Name="Faction" class="inputRadio" Value="Factions.Yellow" autocomplete="off" /> Yellow
                                </label>
                                <label class="btn btn-outline-primary">
                                    <InputRadio Name="Faction" class="inputRadio" Value="Factions.Blue" autocomplete="off" />Blue <br>
                                </label>
                                <label class="btn btn-outline-danger">
                                    <InputRadio Name="Faction" class="inputRadio" Value="Factions.Red" autocomplete="off" />Red <br>
                                </label>
                                <label class="btn btn-outline-success">
                                    <InputRadio Name="Faction" class="inputRadio" Value="Factions.Green" autocomplete="off" />Green <br>
                                </label>
                            </InputRadioGroup>
                        </div>
                        <ValidationMessage For="@(() => registrationUserModel.Faction)" />
                    </div>

                    @*<div class="col-md-12 mb-3">
                            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                <label class="btn btn-outline-warning">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction = Fractions.Yellow;})" id="option1" required=""> Yellow
                                </label>
                                <label class="btn btn-outline-primary">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction = Fractions.Blue;})" id="option2" required=""> Blue
                                </label>
                                <label class="btn btn-outline-danger">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction=Fractions.Red;})" id="option3" required=""> Red
                                </label>
                                <label class="btn btn-outline-success">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => {registrationUserModel.Fraction=Fractions.Green;})" id="option4" required=""> Green
                                </label>
                            </div>
                        </div>*@
                    <div class="col-md-12 mb-3">
                        <label for="FirstName">First Name</label>
                        <InputText id="FirstName" placeholder="Enter Name" @bind-Value="registrationUserModel.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.FirstName)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="LastName">Last Name</label>
                        <InputText id="LastName" placeholder="Enter Surname" @bind-Value="registrationUserModel.LastName" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.LastName)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Email">Email</label>
                        <InputText id="Email" placeholder="Enter Email" @bind-Value="registrationUserModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.Email)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Password">Password</label>
                        <InputText id="Password" placeholder="Enter Password" type="password" @bind-Value="registrationUserModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.Password)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Confirm password">Confirm password</label>
                        <InputText id="Confirm Password" placeholder="Repeat Password" type="password" @bind-Value="registrationUserModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.ConfirmPassword)" />
                    </div>

                    <div class="form-group" align="left">
                        <div class="col-md-12 mb-3">
                            <button type="submit" class="btn btn-primary">Sign up</button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private RegistrationUserModel registrationUserModel = new();
    private bool isRegistrationSuccess = false;
    private bool showSignUpError = false;
    private string signUpErrorText = "";


    [Inject]
    public IUserDataService userDataService { get; set; }

    private async Task CreateNewUser()
    {
        isRegistrationSuccess = false;
        showSignUpError = false;
        try
        {
            await userDataService.AddUser(new UserData(
            id: Guid.NewGuid(),
            userName: registrationUserModel.UserName,
            faction: (Factions)registrationUserModel.Faction,
            firstName: registrationUserModel.FirstName,
            lastName: registrationUserModel.LastName,
            email: registrationUserModel.Email,
            password: registrationUserModel.Password,
            salt: null));
        }
        catch (Exception e)
        // TODO: inline this check - a bit overkill to send entire form with all variables to get error as a response. 
        // Especialy since getting the username right might take a few tries.
        {
            Console.WriteLine(e.Message);
            showSignUpError = true;
            signUpErrorText = e.Message;
        }


        if(showSignUpError is false)
        {
            isRegistrationSuccess = true;
            var result = await AuthService.Login(new LoginUserModel(registrationUserModel.Email, registrationUserModel.Password));
            NavManager.NavigateTo("/");
        }

    }
}
