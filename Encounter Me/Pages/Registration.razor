@page "/Sign up"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

@*<style>
        .inputRadio {
            display: none;
        }

    </style>*@


<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card mt-5 mb-5">
            <div class="card-header">
                <h3>Get ready to encounter the city!</h3>
            </div>
            <div class="card-body">
                @if (isRegistrationSuccess)
                {
                    <div class="alert alert-success" role="alert">Registration was successful</div>
                }

                <EditForm Model="@registrationUserModel" OnValidSubmit="CreateNewUser" class="card-body bg-light mt-0" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="col-md-12 mb-3">
                        <label for="Username">User Name</label>
                        <InputText id="Username" placeholder="Enter Username" @bind-Value="registrationUserModel.UserName" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.UserName)" />
                    </div>

                    <div class="col-md-12 mb-3">
                        <label for="Fraction">Fraction</label><br>
                        <div class="btn-group" role="group">
                            <InputRadioGroup Name="Fraction" @bind-Value="registrationUserModel.Fraction" class="form-check-inline" id="Fraction">
                                <label class="btn btn-outline-warning">
                                    <InputRadio Name="Fraction" class="inputRadio" Value="Fractions.Yellow" autocomplete="off" /> Yellow
                                </label>
                                <label class="btn btn-outline-primary">
                                    <InputRadio Name="Fraction" class="inputRadio" Value="Fractions.Blue" autocomplete="off" />Blue <br>
                                </label>
                                <label class="btn btn-outline-danger">
                                    <InputRadio Name="Fraction" class="inputRadio" Value="Fractions.Red" autocomplete="off" />Red <br>
                                </label>
                                <label class="btn btn-outline-success">
                                    <InputRadio Name="Fraction" class="inputRadio" Value="Fractions.Green" autocomplete="off" />Green <br>
                                </label>
                            </InputRadioGroup>
                        </div>
                        <ValidationMessage For="@(() => registrationUserModel.Fraction)" />
                    </div>

                    @*<InputSelect id="Fraction" placeholder="Select fraction" @bind-Value="fractionID" class="form-control">
                            <option class="bg-warning text-white" value="1">Yellow</option>
                            <option class="bg-info text-white" value="2">Blue</option>
                            <option class="bg-danger text-white" value="3">Red</option>
                            <option class="bg-success text-white" value="4">Green</option>
                        </InputSelect>*@

                    @*</div>*@
                    @*<div class="col-md-12 mb-3">
                            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                <label class="btn btn-outline-warning">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction = Fractions.Yellow;})" id="option1" required=""> Yellow
                                </label>
                                <label class="btn btn-outline-primary">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction = Fractions.Blue;})" id="option2" required=""> Blue
                                </label>
                                <label class="btn btn-outline-danger">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => { registrationUserModel.Fraction=Fractions.Red;})" id="option3" required=""> Red
                                </label>
                                <label class="btn btn-outline-success">
                                    <input type="radio" class="form-check-input" name="fraction" @bind="@registrationUserModel.Fraction" @onclick="@((e) => {registrationUserModel.Fraction=Fractions.Green;})" id="option4" required=""> Green
                                </label>
                            </div>
                        </div>*@
                    <div class="col-md-12 mb-3">
                        <label for="FirstName">First Name</label>
                        <InputText id="FirstName" placeholder="Enter Name" @bind-Value="registrationUserModel.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.FirstName)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="LastName">Last Name</label>
                        <InputText id="LastName" placeholder="Enter Surname" @bind-Value="registrationUserModel.LastName" class="form-control" />
                        <ValidationMessage For="@(() =>  registrationUserModel.LastName)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Email">Email</label>
                        <InputText id="Email" placeholder="Enter Email" @bind-Value="registrationUserModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.Email)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Password">Password</label>
                        <InputText id="Password" placeholder="Enter Password" type="password" @bind-Value="registrationUserModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registrationUserModel.Password)" />
                    </div>
                    <div class="col-md-12 mb-3">
                        <label for="Confirm password">Confirm password</label>
                        <InputText id="Confirm Password" placeholder="Repeat Password" type="password" @bind-Value="registrationUserModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() =>  registrationUserModel.ConfirmPassword)" />
                    </div>

                    <div class="form-group" align="left">
                        <div class="col-md-12 mb-3">
                            <button type="submit" class="btn btn-primary">Sign up</button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private RegistrationUserModel registrationUserModel = new();
    private bool isRegistrationSuccess = false;

    enum Choices { Red, Green, Blue, Yellow };
    private Choices currentChoice = Choices.Red;

    [Inject]
    public IUserDataService userDataService { get; set; }

    private async Task CreateNewUser()
    {
        Console.WriteLine(registrationUserModel.Fraction);
        @*isRegistrationSuccess = true;

            await userDataService.AddUser(new UserData(
                id: Guid.NewGuid(),
                userName: registrationUserModel.UserName,
                firstName: registrationUserModel.FirstName,
                lastName: registrationUserModel.LastName,
                email: registrationUserModel.Email,
                password: registrationUserModel.Password,
                salt: null));

            var result = await AuthService.Login(new LoginUserModel(registrationUserModel.Email, registrationUserModel.Password));
            // Takes some time...
            NavManager.NavigateTo("/");*@
    }
}
