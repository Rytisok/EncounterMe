@page "/TrailProgress/{ID:int}"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@using ExtensionMethods
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using System.Security.Claims
@using System.Collections.Generic
@using System.Linq;
@using System.Text.Json;
@implements IAsyncDisposable
@attribute [Authorize]

<div id="map"></div>

<button @onclick="TrailFinished">
    TestFinish
</button>

<Encounter_Me.Components.InfoModal modal=@_infoModal progressStats=@progressStats cancelButtonAction=AbortTrail></Encounter_Me.Components.InfoModal>
<Encounter_Me.Components.TrailCompleteModal modal=@_successModal currentUser=@currentUser trail=@_trailInProgress progressStats=@progressStats></Encounter_Me.Components.TrailCompleteModal>

@code{

    [Parameter]
    public int ID { get; set; }

    private WindowNavigatorGeolocation _geolocationWrapper;
    private GeolocationPosition _geolocationPosition;

    private List<GeolocationPosition> _positionHistory = new List<GeolocationPosition>();
    private IAsyncDisposable _geopositionWatcher;
    private TrailContainer _trailInProgress;
    private List<GeolocationCoordinates> _trailCoordinateList;
    private int _currentPos = 0;

    private ProgressStats progressStats = new ProgressStats();

    private Modal _successModal = new Modal();
    private Modal _infoModal = new Modal();

    private UserData currentUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private AuthenticationState authState;

    [Parameter]
    public int ModalStatus { get; set; } = 0;

    private GeolocationCoordinates _prevCheckpointCoords = null;

    [Inject]
    public IUserDataService userDataService { get; set; }

    [Inject]
    public ITrailService trailService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthState;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetObjRef = DotNetObjectReference.Create(this);

            var window = await JSRuntime.Window();
            var navigator = await window.Navigator();

            _geolocationWrapper = navigator.Geolocation;

            _geolocationPosition = (await _geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            })).Location;

            await GetTrailInProgress(ID);

            await JSRuntime.InvokeAsync<string>(
            "initializeWalkMap", _trailInProgress.Lat, _trailInProgress.Lng, dotNetObjRef);

            var geoJsonTrailData = await trailService.GenerateTrail(_trailInProgress.Lat, _trailInProgress.Lng, _trailInProgress.Diff);

            _trailCoordinateList = await CoordinateConverter.ConvertGeojsonToGeolocationCoordinates(geoJsonTrailData);

            await JSRuntime.InvokeAsync<object>(
                "drawLines", (object)CoordinateConverter.GeolocationCoordinateListToCoordinateArray(_trailCoordinateList));

            await WatchPosition();
        }

        base.OnAfterRender(firstRender);
    }

    private async Task GetTrailInProgress(int trailID)
    {
        List<TrailContainer> trails = await Http.GetFromJsonAsync<List<TrailContainer>>("sample-data/testTrail.json");
        var searchQuery = from trail
                          in trails
                          where trail.Id == trailID
                          select trail;

        List<TrailContainer> foundTrails = new List<TrailContainer>();

        foreach (var trail in searchQuery)
        {
            _trailInProgress = trail;
        }

    }

    public async Task WatchPosition()
    {
        _geopositionWatcher = await _geolocationWrapper.WatchPosition(async (p) =>
        {
            //might need later to compensate for accuracy problems
            //positionHistory.Add(p.Location);

            await JSRuntime.InvokeAsync<string>("UpdatePositionMarker", p.Location.Coords.Latitude, p.Location.Coords.Longitude);

            //current allowed deviation is 7 meters
            if (CoordinateMath.GetDistanceBetweenCoords(p.Location.Coords, _trailCoordinateList[0]) < 0.007 && _trailCoordinateList.Count > 0)
            {
                _currentPos++;
                if (_prevCheckpointCoords != null)
                    progressStats.DistanceWalked += Math.Round(CoordinateMath.GetDistanceBetweenCoords(_trailCoordinateList[0], _prevCheckpointCoords), 2);

                _prevCheckpointCoords = _trailCoordinateList[0];
                _trailCoordinateList.RemoveAt(0);
            }

            //draw path line
            await JSRuntime.InvokeAsync<object>("drawLines", (object)CoordinateConverter.GeolocationCoordinateListToCoordinateArray(_trailCoordinateList));

            //if user is further than 20m to the next checkpoint, draw line to it
            if (CoordinateMath.GetDistanceBetweenCoords(p.Location.Coords, _trailCoordinateList[0]) > 0.02)
            {
                await JSRuntime.InvokeAsync<object>(
                "drawLineToTrail", CoordinateConverter.GeolocationCoordinateToArray(p.Location.Coords), CoordinateConverter.GeolocationCoordinateToArray(_trailCoordinateList[0]));
            }
            else
            {
                await JSRuntime.InvokeAsync<string>(
                "removeLineToTrail");
            }
            if (_trailCoordinateList.Count <= 1)
            {
                TrailFinished();
            }
            StateHasChanged();
        }
        );
    }

    public async ValueTask DisposeAsync()
    {
        await StopWatch();
    }

    public async Task StopWatch()
    {
        await _geopositionWatcher.DisposeAsync();
        _geopositionWatcher = null;
    }

    [JSInvokable]
    public void OpenDetails()
    {
        progressStats.TrailProgress = ((progressStats.DistanceWalked / _trailInProgress.Length * 100) + 1).ToString() + "%";

        progressStats.TrailTime = Math.Round((DateTime.UtcNow - progressStats.TrailStartTime).TotalHours, 2);

        ModalControl.OpenModal(_infoModal);
        StateHasChanged();
    }

    private async void AbortTrail()
    {
        NavManager.NavigateTo("/");
    }

    [JSInvokable]
    public async void TrailFinished()
    {
        Guid userId = Guid.Parse(authState.User.FindFirst(ClaimTypes.UserData).Value);
        currentUser = await userDataService.GetUserDetails(userId);

        //enables success modal
        ModalControl.OpenModal(_successModal);
        //used to update UI elements
        StateHasChanged();
        int xpGain = LevelAndXp.XpFromTrail(_trailInProgress);
        userDataService.UpdateUserXp(currentUser, xpGain);
    }
}