@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

@page "/Login"

<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card mt-5 mb-5">
            <div class="card-header">
                <h3>Hi there!</h3>
            </div>
            <div class="card-body">
                @if (showAuthenticationError)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>@authenticationErrorText</p>
                    </div>
                }
                @if(isLoginSuccess)
                {
                    <div class="alert alert-success" role="alert">Login was successful</div>
                }
            <EditForm Model="@loginUserModel" OnValidSubmit="@ExecuteLogin" class="card-body bg-light mt-0" autocomplete="on">
                <DataAnnotationsValidator />
                <div class="col-md-12 mb-3">
                    <label for="Email">Enter Email:</label>
                    <InputText id="Username" placeholder="Email" @bind-Value="loginUserModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginUserModel.Email)" />
                </div>

                <div class="col-md-12 mb-3">
                    <label for="Password">Enter Password:</label>
                    <InputText id="Password" placeholder="Password" type="password" @bind-Value="loginUserModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginUserModel.Password)" />
                </div>

                <div class="form-group" align="left">
                    <div class="col-md-12 mb-3">
                        <button type="submit" class="btn btn-primary">Log in</button>
                    </div>
                </div>
            </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private LoginUserModel loginUserModel = new ();
    private bool showAuthenticationError = false;
    private bool isLoginSuccess = false;

    private string authenticationErrorText = "";
    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;
        isLoginSuccess = false;

        try
        {
            AuthenticatedUserModel result = await AuthService.Login(loginUserModel);
            NavManager.NavigateTo("/");
            isLoginSuccess = true;
        }
        catch(Exception loginException)
        {
            authenticationErrorText = loginException.Message;
            showAuthenticationError = true;
        }
    }

}
